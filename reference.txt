-- Sherwood bytecode instruction layout --

SECTION: Literals
  Literals should be followed by n bytes of data to push as the given type.
  When encountered, the resulting value will be pushed to the stack.
= opcd name n =====================================================================================================================
  0x00 null 0
  0x01 byte 1
  0x02 bool 1
  0x03 i32  4
  0x04 i64  8
  0x05 u32  4
  0x06 u64  8
  0x07 f32  4
  0x08 f64  8
  0x09 str  (len:u32)+len
  0x0a list (len:u32)     -- Pulls `len` items from the stack. Highest on stack = first in list.

SECTION: Type Queries
  Opcodes to query the types of variables from the stack.
  These opcodes operate on the top of the stack, but do not pop from it.
  Each opcode returns a bool; true if the type matches, false if it does not.
= opcd name ======================================================================================================================
  0x10 null?
  0x11 byte?
  0x12 bool?
  0x13 i32?
  0x14 i64?
  0x15 u32?
  0x16 u64?
  0x17 f32?
  0x18 f64?
  0x19 str?
  0x1a list?

SECTION: Stack Operations
  Base operations on the data stack itself.
= opcd name (params) ==============================================================================================================
  0x20 drop (v:any)        -- Removes the top of the stack.
  0x21 dupe (v:any)        -- Duplicates the top of the stack.
  0x22 swap (a:any, b:any) -- Swaps the top of the stack with the next value down.

SECTION: Primitive Operations
  Basic and bitwise arithmetic operations, as well as bool/list/string operations.
  Some opcodes are overloaded by parameter types. These will check the type of the top of the stack, 
    and throw a type error if the second parameter does not match (if applicable).
= opcd name (params) ==============================================================================================================
  0x30 add  (a:int, b:int)   -- Adds the two numbers on the top of the stack.
  0x31 sub  (a:int, b:int)   -- Subtracts the number on the top of the stack from the number below it.
  0x32 mul  (a:int, b:int)   -- Multiplies the two numbers on the top of the stack.
  0x33 div  (a:int, b:int)   -- Divides the number on the top of the stack from the number below it.
  0x34 mod  (a:int, b:int)   -- Gets the remainder of dividing the two numbers on the top of the stack.
  0x35 shl  (d:int, n:int)   -- Shifts n left by d bits.
  0x36 shr  (d:int, n:int)   -- Shifts n right by d bits.
  0x37 not  (a:int)          -- Bitwise NOT of a.
  0x37 not  (a:bool)         -- Logical NOT of a.
  0x38 and  (a:int, b:int)   -- Bitwise AND of a and b.
  0x38 and  (a:bool, b:bool) -- Logical AND of a and b.
  0x39 or   (a:int, b:int)   -- Bitwise OR of a and b.
  0x39 or   (a:bool, b:bool) -- Logical OR of a and b.
  0x3a xor  (a:int, b:int)   -- Bitwise XOR of a and b.

SECTION: Comparison Operations
  Opcodes for comparing values.
  These opcodes operate on the top of the stack, but do not pop from it.
= opcd name (params) ==============================================================================================================
  0x40 eql? (a:any, b:any) -- Returns true if a == b.
  0x41 neq? (a:any, b:any) -- Returns true if a != b.
  0x42 grt? (a:num, b:num) -- Returns true if b >  a.
  0x43 gte? (a:num, b:num) -- Returns true if b >= a.
  0x44 lst? (a:num, b:num) -- Returns true if b <  a.
  0x45 lse? (a:num, b:num) -- Returns true if b <= a.

SECTION: IO Operations
  Basic IO interactions.
= opcd name (params) ==============================================================================================================
  0x50 getc ()      -- Gets a char from stdin and pushes it as a u32.
  0x51 getl ()      -- Gets a line from stdin and pushes it as a str (excluding trailing \r?\n).
  0x52 putc (c:int) -- Prints a number from the stack as a character. Errors if c < 0 or c > u32.
  0x53 puts (s:str) -- Prints a string from the stack.

TODO: Variable Operations

SECTION: Control Flow
  Opcodes for dealing with control flow and instruction pointer manipulation.
  All opcodes in this section use static label names structured like string literals (0x09) unless otherwise specified.
  Example:
    -- Correct
    labl 4 test

    -- Incorrect
    str 4 test
    labl
= opcd name (params) ==============================================================================================================
  0x70 labl ()              -- Creates a label which can be jumped to.
  0x71 jump ()              -- Jumps to the label of the given name.
  0x72 jmpc (b:bool)        -- Jumps to the label of the given name if b is true.
  0x73 jmps (s:str)         -- Jumps to the label of the given name. Gets its label name from the stack.
  0x74 jmsc (s:str, b:bool) -- Jumps to the label of the given name if b is true. Gets its label name from the stack.
