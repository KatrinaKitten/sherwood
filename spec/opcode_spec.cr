require "./spec"

describe "SECTION: Literals (0x0_)" do
  opcode "0x00 null", [nil],                     0x00
  opcode "0x01 byte", [0_u8],                    0x01, 0x00
  opcode "0x02 bool", [false],                   0x02, 0x00
  opcode "0x03 i32 ", [252645135_i32],           0x03, 0x0f, 0x0f, 0x0f, 0x0f
  opcode "0x04 i64 ", [1085102592571150095_i64], 0x04, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
  opcode "0x05 u32 ", [252645135_u32],           0x05, 0x0f, 0x0f, 0x0f, 0x0f
  opcode "0x06 u64 ", [1085102592571150095_u64], 0x06, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
  opcode "0x07 f32 ", [9000.1_f32],              0x07, 0x46, 0x0c, 0xa0, 0x66
  opcode "0x08 f64 ", [9000.1_f64],              0x08, 0x40, 0xc1, 0x94, 0x0c, 0xcc, 0xcc, 0xcc, 0xcd
  opcode "0x09 str ", ["Hello, world!"],         [0x09, 0x00, 0x00, 0x00, 13].map(&.to_u8) + "Hello, world!".bytes
  opcode "0x0a list", [[true, false]],           0x02, 0, 0x02, 1, 0x0a, 0x00, 0x00, 0x00, 0x02
end

describe "SECTION: Stack Operations (0x2_)" do
  opcode "0x10 drop", [] of SWAny,   0x00, 0x10
  opcode "0x11 dupe", [nil, nil],    0x00, 0x11
  opcode "0x12 swap", [true, false], 0x02, 0, 0x02, 1, 0x12
end

describe "SECTION: Arithmetic Operations (0x3_)" do
  opcode "0x20 add ", [5], 0x01, 2, 0x01, 3, 0x20
  opcode "0x21 sub ", [1], 0x01, 3, 0x01, 2, 0x21
  opcode "0x22 mul ", [6], 0x01, 2, 0x01, 3, 0x22
  opcode "0x23 div ", [2], 0x01, 4, 0x01, 2, 0x23
  opcode "0x24 mod ", [1], 0x01, 5, 0x01, 2, 0x24
  opcode "0x25 shl ", [0b10010000], 0x01, 0b00100100, 0x01, 2, 0x25
  opcode "0x26 shr ", [0b00001001], 0x01, 0b00100100, 0x01, 2, 0x26
  opcode "0x27 not ", [0b11011011], 0x01, 0b00100100, 0x27
  opcode "0x28 and ", [0b00100000], 0x01, 0b00100100, 0x01, 0b11111011, 0x28
  opcode "0x29 or  ", [0b10110100], 0x01, 0b00100100, 0x01, 0b10010000, 0x29
  opcode "0x2a xor ", [0b10110000], 0x01, 0b00100100, 0x01, 0b10010100, 0x2a
end

describe "SECTION: IO Operations (0x4_)" do
  withStdin("aabc\ntest") {
    opcode "0x30 getc", ['a'.ord], 0x30
    opcode "0x31 getl", ["abc"],   0x31
  }

  withStdout {
    opcode "0x32 putc", [] of SWAny, 0x01, 97, 0x32 {
      Sherwood.stdout.rewind.to_s.should eq("a")
    }
  }
  
  withStdout {
    opcode "0x33 putl", [] of SWAny, [0x09, 0x00, 0x00, 0x00, 14].map(&.to_u8) + "Hello, world!\n".bytes + [0x33_u8] {
      Sherwood.stdout.rewind.to_s.should eq("Hello, world!\n")
    }
  }
end

describe "SECTION: Type Queries (0x5_)" do
  opcode "0x40 null?", [nil,         true], 0x00, 0x40
  opcode "0x41 byte?", [0x0_u8,      true], 0x01, 0x0, 0x41
  opcode "0x42 bool?", [false,       true], 0x02, 0x0, 0x42
  opcode "0x43 i32? ", [0_i32,       true], 0x03, 0x0, 0x0, 0x0, 0x0, 0x43
  opcode "0x44 i64? ", [0_i64,       true], 0x04, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44
  opcode "0x45 u32? ", [0_u32,       true], 0x05, 0x0, 0x0, 0x0, 0x0, 0x45
  opcode "0x46 u64? ", [0_u64,       true], 0x06, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46
  opcode "0x47 f32? ", [0.0_f32,     true], 0x07, 0x0, 0x0, 0x0, 0x0, 0x47
  opcode "0x48 f64? ", [0.0_f64,     true], 0x08, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48
  opcode "0x49 str? ", ["",          true], 0x09, 0x0, 0x0, 0x0, 0x0, 0x49
  opcode "0x4a list?", [[] of SWAny, true], 0x0a, 0x0, 0x0, 0x0, 0x0, 0x4a
end

# TODO: Variable Operations
# TODO: Control Flow
